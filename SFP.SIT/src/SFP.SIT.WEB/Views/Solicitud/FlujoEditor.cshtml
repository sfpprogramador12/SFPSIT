@using SFP.SIT.SERV.Util

<script type="text/javascript" src="~/js/sit/go.js"></script>


<script id="code">
    function init() {
        if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
        var $ = go.GraphObject.make;  // for conciseness in defining templates
        myDiagram =
            $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
                {
                    // start everything in the middle of the viewport
                    initialContentAlignment: go.Spot.Center,
                    // have mouse wheel events zoom in and out instead of scroll up and down
                    "toolManager.mouseWheelBehavior": go.ToolManager.WheelZoom,
                    // support double-click in background creating a new node
                    "clickCreatingTool.archetypeNodeData": { text: "new node" },
                    // enable undo & redo
                    "undoManager.isEnabled": true
                });
        // when the document is modified, add a "*" to the title and enable the "Save" button
        myDiagram.addDiagramListener("Modified", function (e) {
            var button = document.getElementById("SaveButton");
            if (button) button.disabled = !myDiagram.isModified;
            var idx = document.title.indexOf("*");
            if (myDiagram.isModified) {
                if (idx < 0) document.title += "*";
            } else {
                if (idx >= 0) document.title = document.title.substr(0, idx);
            }
        });
        // define the Node template
        myDiagram.nodeTemplate =
            $(go.Node, "Auto",
                new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                // define the node's outer shape, which will surround the TextBlock
                $(go.Shape, "RoundedRectangle",
                    {
                        parameter1: 20,  // the corner has a large radius
                        fill: $(go.Brush, "Linear", { 0: "rgb(0, 242, 113)", 1: "rgb(0, 242, 113)" }),
                        stroke: null,
                        portId: "",  // this Shape is the Node's port, not the whole Node
                        fromLinkable: true, fromLinkableSelfNode: true, fromLinkableDuplicates: true,
                        toLinkable: true, toLinkableSelfNode: true, toLinkableDuplicates: true,
                        cursor: "pointer"
                    }),
                $(go.TextBlock,
                    {
                        font: "bold 11pt helvetica, bold arial, sans-serif",
                        editable: true  // editing the text automatically updates the model data
                    },
                    new go.Binding("text").makeTwoWay())
            );
        // unlike the normal selection Adornment, this one includes a Button
        myDiagram.nodeTemplate.selectionAdornmentTemplate =
            $(go.Adornment, "Spot",
                $(go.Panel, "Auto",
                    $(go.Shape, { fill: null, stroke: "blue", strokeWidth: 2 }),
                    $(go.Placeholder)  // a Placeholder sizes itself to the selected Node
                ),
                // the button to create a "next" node, at the top-right corner
                $("Button",
                    {
                        alignment: go.Spot.TopRight,
                        click: addNodeAndLink  // this function is defined below
                    },
                    $(go.Shape, "PlusLine", { width: 6, height: 6 })
                ) // end button
            ); // end Adornment
        // clicking the button inserts a new node to the right of the selected node,
        // and adds a link to that new node
        function addNodeAndLink(e, obj) {
            var adornment = obj.part;
            var diagram = e.diagram;
            diagram.startTransaction("Add State");
            // get the node data for which the user clicked the button
            var fromNode = adornment.adornedPart;
            var fromData = fromNode.data;
            // create a new "State" data object, positioned off to the right of the adorned Node
            var toData = { text: "new" };
            var p = fromNode.location.copy();
            p.x += 200;
            toData.loc = go.Point.stringify(p);  // the "loc" property is a string, not a Point object
            // add the new node data to the model
            var model = diagram.model;
            model.addNodeData(toData);
            // create a link data from the old node data to the new node data
            var linkdata = {
                from: model.getKeyForNodeData(fromData),  // or just: fromData.id
                to: model.getKeyForNodeData(toData),
                text: "transition"
            };
            // and add the link data to the model
            model.addLinkData(linkdata);
            // select the new Node
            var newnode = diagram.findNodeForData(toData);
            diagram.select(newnode);
            diagram.commitTransaction("Add State");
            // if the new node is off-screen, scroll the diagram to show the new node
            diagram.scrollToRect(newnode.actualBounds);
        }
        // replace the default Link template in the linkTemplateMap
        myDiagram.linkTemplate =
            $(go.Link,  // the whole link panel
                {
                    curve: go.Link.Bezier, adjusting: go.Link.Stretch,
                    reshapable: true, relinkableFrom: true, relinkableTo: true,
                    toShortLength: 3
                },
                new go.Binding("points").makeTwoWay(),
                new go.Binding("curviness"),
                $(go.Shape,  // the link shape
                    { strokeWidth: 1.5 }),
                $(go.Shape,  // the arrowhead
                    { toArrow: "standard", stroke: null }),
                $(go.Panel, "Auto",
                    $(go.Shape,  // the label background, which becomes transparent around the edges
                        {
                            fill: $(go.Brush, "Radial",
                                { 0: "rgb(240, 240, 240)", 0.3: "rgb(240, 240, 240)", 1: "rgba(240, 240, 240, 0)" }),
                            stroke: null
                        }),
                    $(go.TextBlock, "transition",  // the label text
                        {
                            textAlign: "center",
                            font: "9pt helvetica, arial, sans-serif",
                            margin: 4,
                            editable: true  // enable in-place editing
                        },
                        // editing the text automatically updates the model data
                        new go.Binding("text").makeTwoWay())
                )
            );
        // read in the JSON data from the "mySavedModel" element
        load();
    }
    // Show the diagram's model in JSON format
    function save() {
        document.getElementById("mySavedModel").value = myDiagram.model.toJson();
    }
    function load() {
        myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
    }
</script>


<body onload="init()">
    <div id="sample">
        <div id="myDiagramDiv" style="border: solid 1px black; width: 100%; height: 400px;" ></div>
        <p>
            El texto de las cajas y de las fechas es editable
            Al hacer doble click en el fondo del diagrama, se crea un nuevo nodo
            La rueda del mouse acerca o aleja la vista del flujo.
            El texto es editable tanto para los perfiles como para las acciones.
        </p>
       
        <div>
            <div>
                <button class="btn btn-primary" id="SaveButton" onclick="save()">Guardar cambios</button>
                <button class="btn btn-primary" onclick="load()">Deshacer Cambios</button>
                JSON del Flujo:
            </div>
            <br />
            <textarea id="mySavedModel" style="width:100%;height:300px">
             { 
                "class": "go.GraphLinksModel",
                              "nodeKeyProperty": "id",
                              "nodeDataArray": [ 
                            {"id":0, "loc":"-222 152", "text":"Fecha: 12-12-2016\n\nRecibir Solicitud INAI\n", "fecha":"12-12-12", "Perfil": "INAI"},
                            {"id":1, "loc":"49.46 163.41003", "text":"UT- recibir Solicitud\nDGT\n", "fecha":"13-13-13", "Perfil":"INAI"},
                            {"id":2, "loc":"333 92.9", "text":"PRUD Recibir\nsolicitud\nDGT"},
                            {"id":3, "loc":"603 97.9", "text":"Analizar Solicitud\nDGTI"},
                            {"text":"Analizar Solicitud\nDGTI", "loc":"597.9 195.516875", "id":-5}
                             ],
              "linkDataArray": [ 
                        {"from":1, "to":2, "text":"Asignar\n", "points":[192,163,237,139.4,283.9,127.6,333.0,127.9]},
                        {"from":2, "to":3, "text":"Turnar\n", "points":[451,117,494.8,108.5,543.2,107.3,603.0,115.9]},
                        {"from":2, "to":-5, "points":[451.4,137,510.1,145.8,566.9,165.3,621.5,195.7], "text":"Turnar\n"},
                        {"from":0, "to":1, "points":[-49,186,-16,183,16,183.6,49.4,187.9], "text":"Enviar\n"}
             ]
            }
            </textarea>

            <svg width="400" height="180">
                <g>
                    <rect x="50" y="20" rx="20" ry="20" width="150" height="150"
                          style="fill:red;stroke:black;stroke-width:5;opacity:0.5" />
                    <text x="55" y="50" font-family="Verdana" font-size="15" fill="black">Hello</text>
                </g>
            </svg>



        </div>
    </div>
</body>
